package thread;



import java.awt.Font;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MacBookPro
 */
public class Fmain extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Fmain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tex = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        minF = new javax.swing.JTextField();
        maxF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        countF = new javax.swing.JTextField();
        ti = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tex.setColumns(20);
        tex.setRows(5);
        jScrollPane2.setViewportView(tex);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("min");

        minF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minF.setText("NAN");
        minF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFActionPerformed(evt);
            }
        });

        maxF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxF.setText("NAN");
        maxF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("max");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("node count");

        countF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        countF.setText("NAN");
        countF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countFActionPerformed(evt);
            }
        });

        ti.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ti.setText("MultiThreading ");
        ti.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton1.setText("stop");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ti, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minF, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxF, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countF, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ti, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(minF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(maxF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(countF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jButton1)
                        .addContainerGap(91, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(56, 56, 56))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minFActionPerformed

    private void maxFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxFActionPerformed

    private void countFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countFActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        shutdown();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    private static final AtomicBoolean running = new AtomicBoolean(true);
    public static ArrayList<Integer> list = new ArrayList<Integer>();
    public static void shutdown() {
        running.set(false);
    }
    public static void addToTree(binTree tb)
    {
        Random rand = new Random();
        synchronized(tb)
        {
            int temp =rand.nextInt(400);
            tb.insert(temp);
            list.add(temp);

        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fmain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fmain().setVisible(true);
            }
        });
        
        binTree tb= new binTree();           
        add ma = new add(tb);
        display ms = new display(tb);
        delete mx = new delete(tb);
        min mv=new min(tb);
        max mq=new max(tb);
        new Thread(ma).start();
        new Thread(ms).start();
        new Thread(mx).start();
       new Thread(mv).start();
       new Thread(mq).start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField countF;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextField maxF;
    public static javax.swing.JTextField minF;
    public static javax.swing.JTextArea tex;
    public static javax.swing.JLabel ti;
    // End of variables declaration//GEN-END:variables

private static class add implements Runnable 
    {
    
    private binTree tb =new binTree();
    public add(binTree tb)
    {
        super();
        
        this.tb=tb;
        
    }
    @Override
        public void run() {
            int i=0;
          while ( running.get() )
          {
                addToTree(tb);
                i++;
                try
                {
                Thread.sleep(1000);
                }
                catch(Exception ex)
                {
                    System.out.println("Erorr ---->" + ex.getMessage());
                }
          }
        }
    }
private static class delete implements Runnable 
    {
    
    private binTree tb =new binTree();
    public delete(binTree tb)
    {
        super();
        this.tb=tb;
        
    }
    @Override
        public void run() {
            int i=0;
          while ( running.get() )
          {
              try
              {
              Thread.sleep(1500);
              }
              catch(Exception ex)
                {
                    System.out.println("Erorr ---->" + ex.getMessage());
                }
                Random rand = new Random();
                int size=tb.getN();
                if (size>0)
                {
                    int index =rand.nextInt(size);
                    if(index>=0&&index<size)
                    {
                        synchronized(tb)
                        {
                            
                            tb.deleteKey(list.remove(index));
                            tb.setN(tb.getN()-1);
                            
                        }
                    }
                    
                }
                i++;
               
                
          }
        }
    }
private static class display implements Runnable 
    {
    
    private binTree tb =new binTree();
    public display(binTree tb)
    {
        super();
        
        this.tb=tb;
        
    }
    @Override
        public void run() {
            int i=0;
          while ( running.get() )
          {
              
              synchronized(tb)
              {
                  if (!tb.isEmpty())
                  {
//                      System.out.println(tb.getN());
                      countF.setText(""+tb.getN());
                      tex.setText(tex.getText()+ i +") "+tb.inorder()+"\n");
                  }
//                  System.out.print(tb.getN()+") in order ");
                  
                  
                  i++;
              }
                
                try
                {
              Thread.sleep(1000);
                }
                catch(Exception ex)
                {
                    System.out.println("Erorr ---->" + ex.getMessage());
                }
                
          }
        }
    }
void change(String data)
{
    synchronized(minF)
    {
        minF.setText(data);
    }
}
private static class min implements Runnable 
    {
    
    private binTree tb =new binTree();
    public min(binTree tb)
    {
        super();
        
        this.tb=tb;
        
    }
    @Override
        public void run() {
          while ( running.get() )
          {
              if (tb.getN()>0&&!tb.isEmpty())
              {
                    synchronized(tb)
                    {
//                        System.out.println("the min value is : "+tb.minValue());
                        minF.setText(""+tb.minValue());
                    }
              }
               try
               {
              Thread.sleep(1000);
               }
               catch(Exception ex)
                {
                    System.out.println("Erorr ---->" + ex.getMessage());
                }
               
                
          }
        }
    }
private static class max implements Runnable 
    {
    
    private binTree tb =new binTree();
    public max(binTree tb)
    {
        super();
        
        this.tb=tb;
        
    }
    @Override
        public void run() {
          while ( running.get() )
          {
              if (tb.getN()>0&&!tb.isEmpty())
              {
                    synchronized(tb)
                    {
//                        System.out.println("the max value is : "+tb.maxValue());
                        maxF.setText(""+tb.maxValue());
                    }
              }
                try
                {
                    Thread.sleep(1000);
                }
                catch(Exception ex)
                {
                    System.out.println("Erorr ---->" + ex.getMessage());
                }
                
          }
        }
    }


}
